/*
 * main.cu
 *
 *  Created on: Nov 14, 2019
 *      Author: cuda-s01
 */
#include <stdio.h>
__global__ void MatrixMulKernel(float* M, float* N, float* P, int Width) {
	// Calculate the row index of the P element and M
	int Row = blockIdx.y*blockDim.y+threadIdx.y;
	// Calculate the column index of P and N
	int Col = blockIdx.x*blockDim.x+threadIdx.x;
	if ((Row < Width) && (Col < Width)) {
		float Pvalue = 0;
		// each thread computes one element of the block sub-matrix
		for (int k = 0; k < Width; ++k) {
			Pvalue += M[Row*Width+k]*N[k*Width+Col];
		}
		P[Row*Width+Col] = Pvalue;
	}
}

int main(void)
{
	printf("Entering the program.\n");
	cudaError_t err = cudaSuccess;

	int matrix_size = 2;
	size_t size = matrix_size * matrix_size * sizeof(float);
	printf("Matrix [%d %d] multiplication.", matrix_size, matrix_size);

	//allocate matrixes (two input ones, one output one):
	printf("Started variables allocation for the host.");
	float **M_h = (float **)malloc(rows * sizeof(float*));
	for(int i = 0; i < matrix_size; i++)
	{
		M_h[i] = (float *)malloc(matrix_size * sizeof(float));
		if(M_h[i] == NULL) printf(stderr, "Failed to allocate host matrix!\n");
	}

	float **N_h = (float **)malloc(rows * sizeof(float*));
	for(int i = 0; i < matrix_size; i++)
	{
		N_h[i] = (float *)malloc(matrix_size * sizeof(float));
		if(N_h[i] == NULL) printf(stderr, "Failed to allocate host matrix!\n");
	}

	float **P_h = (float **)malloc(rows * sizeof(float*));
	for(int i = 0; i < matrix_size; i++)
	{
		P_h[i] = (float *)malloc(matrix_size * sizeof(float));
		if(P_h[i] == NULL) printf(stderr, "Failed to allocate host matrix!\n");
	}

	float *M_d, *N_d, *P_d;
	err = cudaMalloc(&M_d, sizeof(float) * matrix_size * matrix_size);
	cudaMalloc(&N_d, sizeof(float) * matrix_size * matrix_size);
	cudaMalloc(&P_d, sizeof(float) * matrix_size * matrix_size);

	//MatrixMulKernel <<<1, 5>>>();

}
